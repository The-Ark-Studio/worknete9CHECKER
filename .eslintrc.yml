env:
    browser: true
    es2021: true
extends:
    - eslint:recommended
    - plugin:@typescript-eslint/recommended
    - plugin:react-hooks/recommended
    - prettier
parser: "@typescript-eslint/parser"
parserOptions:
    ecmaVersion: latest
    sourceType: module
    project: tsconfig.json
plugins:
    - react
    - react-refresh
    - project-structure
rules:
    {
        "react-hooks/exhaustive-deps": "warn",
        "react-refresh/only-export-components": "warn",
        "react/prefer-stateless-function": "error",
        "react/button-has-type": "error",
        "react/no-unused-prop-types": "error",
        "react/jsx-pascal-case": "off",
        "react/jsx-no-script-url": "error",
        "react/no-children-prop": "error",
        "react/no-danger": "error",
        "react/no-danger-with-children": "error",
        "react/no-unstable-nested-components": ["error", { allowAsProps: true }],
        "react/jsx-fragments": "error",
        "react/destructuring-assignment": ["error", "always", { destructureInSignature: "always" }],
        "react/jsx-no-leaked-render": ["error", { validStrategies: ["ternary"] }],
        "react/jsx-max-depth": ["error", { max: 10 }],
        "react/function-component-definition": ["warn", { namedComponents: "arrow-function" }],
        "react/jsx-key":
            ["error", { checkFragmentShorthand: true, checkKeyMustBeforeSpread: true, warnOnDuplicates: true }],
        "react/jsx-no-useless-fragment": "warn",
        "react/jsx-curly-brace-presence": "warn",
        "react/no-typos": "warn",
        "react/display-name": "warn",
        "react/self-closing-comp": "warn",
        "react/jsx-sort-props": "warn",
        "react/react-in-jsx-scope": "off",
        "react/jsx-one-expression-per-line": "off",
        "react/prop-types": "off",
        "@typescript-eslint/naming-convention":
            [
                "error",
                { selector: "default", format: ["camelCase", "PascalCase"], leadingUnderscore: "allow" },
                { selector: "default", format: ["camelCase"], leadingUnderscore: "allow" },
                {
                    selector: "variable",
                    format: ["PascalCase", "camelCase", "UPPER_CASE", "snake_case"],
                    leadingUnderscore: "allowSingleOrDouble",
                    trailingUnderscore: "allowSingleOrDouble"
                },
                {
                    selector: "interface",
                    format: ["PascalCase", "camelCase", "UPPER_CASE"],
                    leadingUnderscore: "allowSingleOrDouble",
                    trailingUnderscore: "allowSingleOrDouble",
                    prefix: ["I"]
                },
                {
                    selector: "enum",
                    format: ["PascalCase", "camelCase", "UPPER_CASE"],
                    leadingUnderscore: "allowSingleOrDouble",
                    trailingUnderscore: "allowSingleOrDouble",
                    prefix: ["E"]
                },
                {
                    selector: "parameter",
                    format: ["camelCase", "camelCase", "UPPER_CASE", "snake_case"],
                    leadingUnderscore: "allowSingleOrDouble",
                    trailingUnderscore: "allowSingleOrDouble"
                },
                { selector: "property", format: null, leadingUnderscore: "allow" },
                { selector: "typeLike", format: ["PascalCase"] }
            ],
        "project-structure/file-structure": "error",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }],
        "no-restricted-imports": ["error", { "patterns": ["@mui/material/*/*/*"] }]
    }
settings: { "react": { "version": "detect" }, "project-structure/config-path": "project-structure-conf.json" }
